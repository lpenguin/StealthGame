names: Robot (States)
blackboard:
  Initial Position:
    type: Vector3
    
  Initial Rotation:
    type: Quaternion
    
  Player:
    type: Transform

  Saw Player:
    type: bool

  Vision Sensor:
    type: Transform

  Check Position:
    type: Vector3

  Check Position Sense:
    type: string

  Check Position Source:
    type: Transform

  Current Check Position Source:
    type: Transform


  PatrolZone: 
    type: Transform

  Patrol Route:
    type: Transform

  Patrol Position:
    type: Vector3

  Patrol Rotate:
    type: bool

  Patrol Rotation:
    type: Quaternion

  Patrol Index:
    type: int
    value: 0

  Patrol Tree:
    type: string

  State:
    type: string
    value: Idle

  Search Time:
    type: float
    value: 7
    
trees:
  Idle:
    Sequence:
    - Idle:
    - Bark: { text: "Going back" }
    - GoTo: $"Initial Position"
    - Rotate: { rotation: $"Initial Rotation" }
    - Idle:

  GotoPatrolPoint:
    Sequence:
    - GoTo: $Patrol Position
    - Success:
      - Sequence: 
        - Bool.IsSet: $"Patrol Rotate"
        - Rotate: $"Patrol Rotation"
    - Selector:
      - Sequence:
        - Str.IsEmpty: $"Patrol Tree"
        - Success:
      - Tree: $"Patrol Tree"

  Patrol:
    Sequence:
    - Patrol.CurrentPoint: { $"Patrol Route", $"Patrol Index", $"Patrol Position", $"Patrol Rotate", $"Patrol Rotation", $"Patrol Tree" }
    - Tree: GotoPatrolPoint
    - Repeater:
        - Sequence:
          - Patrol.NextPoint: { $"Patrol Route", $"Patrol Index", $"Patrol Position", $"Patrol Rotate", $"Patrol Rotation", $"Patrol Tree" }
          - Tree: GotoPatrolPoint

  BarkSomething:
    Bark: "Barking Something"

  Use:
    Sequence:
    - Wait: .5
    - Animator.PlayState: { "Use", "Actions" }
    - Wait: .5
    
  Wait:
    Wait: 1

  LookAround:
    Sequence:
    - Robot.EnableLookAt: true
    - RandomSelector:        
      - Animator.PlayState: { state: "Look Around" , layer: "Actions" }
      - Animator.PlayState: { state: "Look Around2" , layer: "Actions" }
    - Robot.EnableLookAt: false
      
root:
  Sequence:
  - "Root"
  - Robot.EnableLookAt: false
  - Parallel:
    - Selector.Active: # Enable/disable event monitor
      - Monitor:
          condition:
            Str.In: { $State, ["Aggressive", "Idle"] }
          action:
            Sequence:
            - Transform.Set: { $"Current Check Position Source", null }
            - Transform.Set: { $"Check Position Source", null }
            - Fail:
                
      - Monitor: # Introduce "Monitor" mode (similar to Guard)
          condition: 
            Sequence:
            - Str.In: { $State, ["Searching", "Alerted", "Inspecting", "Idle"] }
  
          action:
            Sequence:
            - Log: "Registering Event"
            - RegisterEvent: "Check Position" # TODO:
            - Idle:
  
      - Sequence:
        - Log: "Deregistering Event"
        - DeregisterEvent: "Check Position"
        - Idle:

    - Selector.Active:  # State machine
      - "State machine"
      - Monitor: #  Transition: Alerted (Hear)
          comment: "Transition to Alerted"
          condition:
            Sequence:  # Condition
            - Str.In: { $State, ["Alerted", "Idle"] }
            - Sequence:
              - EventReceived: {"Check Position", $"Check Position Source", $"Check Position Sense", $"Check Position"}
              # - Break: true
#              - Not:
#                - Transform.Equals: { $"Current Check Position Source", $"Check Position Source" }
              - Interrupt: "StateAlerted"
          action: 
            Sequence:  # Action
            - Transform.Set: { $"Current Check Position Source", $"Check Position Source" }
            - Selector:
              - Sequence:
                - Str.Equals: {$"Check Position Sense", "Hear"}
                - Audio.Play: "I hear something"
#                - Bark: "I heard something!" # Transition actions
              - Success:
            - Animator.SetTrigger: { "Interrupt Action" }
            - Str.Set: { $State, "Alerted" }
  
        
      - Monitor:  # Transition: Aggressive
          comment: "Transition to Aggressive"
          condition:
            Sequence:
            - Str.In: { $State, ["Alerted", "Idle", "Inspecting", "Searching"]}
            - Sensor.HasTarget: { sensor: $Vision Sensor, target: $Player}
          action:
            Sequence:
            - Success:
              - Sequence:
                - Not:
                  - Str.Equals: { $State, "Searching" }
                - Audio.Play: "Intruder"
            - Animator.SetTrigger: { "Interrupt Action" }
            - Str.Set: { $State, "Aggressive" }

      - Monitor: # Transition: Searching
          comment: "Transition to Searching"
          condition:
            Sequence:
            - Str.Equals: { $State, "Aggressive"}
            - Not:
              - Sensor.HasTarget: { sensor: $Vision Sensor, target: $Player}
  
          action:
            Sequence:
            - Animator.SetTrigger: { "Interrupt Action" }
            - Str.Set: { $State, "Searching" }
  
  
      - Monitor#StateAlerted:  # State: Alerted
          comment: "Alerted State"
          condition:
            Str.Equals: { $State, "Alerted" }
          action:
            Sequence:
            - Robot.SetEmotion: "Alerted"
            - Robot.LookAt: $Check Position
            - Wait: 1.0
            - Robot.Bark: "Going to check"
            - Robot.EnableLookAt: false
            - Nav.GoTo: $Check Position
                  
            - Robot.Bark: "Inspecting"
#            - Robot.LookAt: $Check Position
            - Robot.EnableLookAt: true
            - Animator.PlayState: { "Look Around", "Actions" }
            - Wait: 2.0
            - Robot.EnableLookAt: false
            - Str.Set: { $State, "Idle" }
            - Idle:
  
      - Monitor:  # State: Searching
          comment: "Searching State"
          condition:
            Str.Equals: { $State, "Searching" }
          action:
            Sequence:
            - Robot.SetEmotion: "Aggressive"
            - Robot.EnableLookAt: false
            - Success:
              - Parallel:
                - Sequence:
                  - Wait: $Search Time
                  - Fail:
                
                - Parallel:
                  - Sequence:
                    - Wait: 2
                    - Repeater:
                      - Sequence:
                        - Wait: 3
                        - Audio.Play: "Locating intruder"
    #                  - Robot.Bark: "Where are you?"
                        
                  - Repeater:
                    - Success:
                      - Sequence:
                        - EventReceived: {"Check Position", $"Check Position Source", $"Check Position Sense", $"Check Position"}
                        - Log: Interrupting SearchingSeq
                        - Interrupt: SearchingSeq
                        
                  - Sequence#SearchingSeq:
                    - Nav.GoTo: $Check Position
                    - Repeater:
                      - Sequence:
                        - Robot.EnableLookAt: true
                        - Animator.PlayState: { state: "Look Around Fast", layer: "Actions" }
                        - Robot.EnableLookAt: false
                        - Wait: 2
                        - Nav.RandomPoint: { $"Check Position", distance: 10}
                        - Success:
                          - Nav.GoTo: $Check Position
                      
            - Audio.Play: "Returning to my main program"
            - Str.Set: { $State, "Idle" }
  
      - Monitor:
          comment: "Aggressive State"
          condition:
            Str.Equals: { $State, "Aggressive" }
          action:
            Parallel:
            - Repeater:
              - Sequence:
                - Transform.GetPosition: { $Player, $"Check Position" }
                - Robot.LookAt: { $"Check Position" }
            - Sequence:
              - Robot.SetEmotion: "Aggressive"
#              - Robot.Bark: "Intruder!!"
              - Repeater:
                - Nav.GoTo: $Check Position
      
      - Monitor:  # State: Idle
          comment: "Idle State"
          condition: 
            Str.Equals: { $State, "Idle" }
          action:
            Sequence:
            - Robot.SetEmotion: "Idle"
            - Robot.EnableLookAt: false
            - Animator.SetTrigger: { "Interrupt Action" }
            - Tree: Patrol
              
      - Idle:
