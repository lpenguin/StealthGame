names: Robot (States)
blackboard:
  Initial Position:
    type: Vector3
    
  Initial Rotation:
    type: Quaternion
    
  Player:
    type: Transform

  Saw Player:
    type: bool

  Vision Sensor:
    type: Transform

  Attack Sensor:
    type: Transform
    
  Check Position:
    type: Vector3

  Check Position Sense:
    type: string

  Check Position Source:
    type: Transform

  Current Check Position Source:
    type: Transform


  PatrolZone: 
    type: Transform

  Patrol Route:
    type: Transform

  Patrol Position:
    type: Vector3

  Patrol Rotate:
    type: bool

  Patrol Rotation:
    type: Quaternion

  Patrol Index:
    type: int
    value: 0

  Patrol Tree:
    type: string

  State:
    type: string
    value: Idle

  Search Time:
    type: float
    value: 7
    
trees:
  Idle:
    Sequence:
    - Idle:
    - Bark: { text: "Going back" }
    - GoTo: $"Initial Position"
    - Rotate: { rotation: $"Initial Rotation" }
    - Idle:

  GotoPatrolPoint:
    Sequence:
    - GoTo: $Patrol Position
    - Success:
      - Sequence: 
        - Bool.IsSet: $"Patrol Rotate"
        - Rotate: $"Patrol Rotation"
    - Selector:
      - Sequence:
        - Str.IsEmpty: $"Patrol Tree"
        - Success:
      - Sequence:
        - Tree: $"Patrol Tree"

  Patrol:
    Sequence:
    - Patrol.CurrentPoint: { $"Patrol Route", $"Patrol Index", $"Patrol Position", $"Patrol Rotate", $"Patrol Rotation", $"Patrol Tree" }
    - Tree: GotoPatrolPoint
    - Repeater:
        - Sequence:
          - Patrol.NextPoint: { $"Patrol Route", $"Patrol Index", $"Patrol Position", $"Patrol Rotate", $"Patrol Rotation", $"Patrol Tree" }
          - Tree: GotoPatrolPoint
    - Log: Done patrol

  BarkSomething:
    Bark: "Barking Something"

  Use:
    Sequence:
    - Wait: .5
    - Animator.PlayState: { "Use", "Actions" }
    - Wait: .5
    
  Wait:
    Wait: 1

  LookAround:
    Sequence:
    - Robot.EnableLookAt: true
    - RandomSelector:        
      - Animator.PlayState: { state: "Look Around" , layer: "Actions" }
      - Animator.PlayState: { state: "Look Around2" , layer: "Actions" }
    - Robot.EnableLookAt: false
  
  Transition_ToAlerted:
    Sequence:
    - Event.Wait: { "Check Position", $"Check Position Source", $"Check Position Sense", $"Check Position" }
    - Selector:
      - Str.Equals: { $State, "Alerted" }      
      - Audio.Play: "I hear something"
    - Str.Set: { $State, "Alerted" }
  
  Transition_ToAggressive:
    Sequence:
    - UntilSuccess:
      - Vision.HasTarget: { sensor: $Vision Sensor, target: $Player }
    - Sequence:
      - Success:
        - Sequence:
          - Not:
            - Str.In: { $State, ["Searching", "Aggressive"] }
          - Audio.Play: "Intruder"
      - Animator.SetTrigger: { "Interrupt Action" }
      - Str.Set: { $State, "Aggressive" }

  Transition_ToSearching:
    Sequence:
    - UntilSuccess:
      - Not:
        - Vision.HasTarget: { sensor: $Vision Sensor, target: $Player }
    - Sequence:
      - Animator.SetTrigger: { "Interrupt Action" }
      - Str.Set: { $State, "Searching" }
  
  
root:
  Sequence:
  - "Root"
  - Robot.EnableLookAt: false
  - Parallel:
    - Selector.Active: # Enable/disable event monitor
#      - Monitor:
#          condition:
#            Str.In: { $State, ["Aggressive", "Idle"] }
#          action:
#            Sequence:
#            - Transform.Set: { $"Current Check Position Source", null }
#            - Transform.Set: { $"Check Position Source", null }
#            - Fail:                  
#      - Monitor:
#          condition:
#            Not:
#            - Vision.HasTarget: { sensor: $Vision Sensor, target: $Player }
#          action:  
#            Sequence:
#            - Robot.StopAttack:
#            - Fail:  
              
      - Monitor:  # State: Alerted
          comment: "Alerted State"
          condition:
            Str.Equals: { $State, "Alerted" }
          action:
            Race:
            - Tree: Transition_ToAggressive
#            - Tree: Transition_ToAlerted
            - Sequence:
              - Robot.StopAttack:
              - Robot.EnableLookAt: true
              - Robot.SetEmotion: "Alerted"
              - Robot.LookAt: $Check Position
              - Nav.Stop:
              - Wait: 1.0
#              - Robot.Bark: "Going to check"
              - Robot.EnableLookAt: false
              - Race:
                - Repeater:
                  - Event.Wait: { "Check Position", $"Check Position Source", $"Check Position Sense", $"Check Position" }
                - Sequence:
                  - Nav.GoTo: $Check Position
              - Race:
                - Tree: Transition_ToAlerted
                - Sequence#SearchSequence:
                  - Audio.Play: "Inspecting"
                  - Tree: LookAround
                  - Str.Set: { $State, "Idle" }
  
      - Monitor:  # State: Searching
          comment: "Searching State"
          condition:
            Str.Equals: { $State, "Searching" }
          action:
            Race:
            - Tree: Transition_ToAggressive
            - Sequence:
              - Robot.StopAttack:
              - Robot.SetEmotion: "Aggressive"
              - Robot.EnableLookAt: false
              - Race:
                - Sequence#SearchTimer:
                  - Wait: $Search Time
                
                - Parallel:
                  - Sequence:
                    - Wait: 2
                    - Repeater:
                      - Sequence:
                        - Wait: 3
                        - Audio.Play: "Locating intruder"
    #                  - Robot.Bark: "Where are you?"
                  - Repeater:                          
                    - Sequence:
                      - Event.Wait: {"Check Position", $"Check Position Source", $"Check Position Sense", $"Check Position"}
                      - Log: Interrupting SearchingSeq
                      - Interrupt: SearchSeq
                      - Interrupt: SearchTimer
                        
                  - Sequence#SearchSeq:
                    - Nav.GoTo: $Check Position
                    - Repeater:
                      - Sequence:
                        - Robot.EnableLookAt: true
                        - Animator.PlayState: { state: "Look Around Fast", layer: "Actions" }
                        - Robot.EnableLookAt: false
                        - Wait: 2
                        - Nav.RandomPoint: { $"Check Position", distance: 10}
                        - Success:
                          - Nav.GoTo: $Check Position
              - Audio.Play: "Returning to my main program"
              - Str.Set: { $State, "Idle" }
#              - Break: true
  
      - Monitor:
          comment: "Aggressive State"
          condition:
            Str.Equals: { $State, "Aggressive" }
          action:
            Race:
            - Tree: Transition_ToSearching
            - Repeater:
              - Sequence:
                - Transform.GetPosition: { $Player, $"Check Position" }
                - Robot.LookAt: { $"Check Position" }
            - Sequence:
              - Robot.StopAttack:
              - Robot.SetEmotion: "Aggressive"
#              - Robot.Bark: "Intruder!!"
              - Parallel:
                - Repeater:
                  - Nav.GoTo: { $Check Position, stopDistance: 5 }
                - Repeater:
                  - Selector:
                    - Sequence:
                      - Sensor.HasTarget: { sensor: $Attack Sensor, target: $Player }
                      - Log: "Has Target"
                      - Robot.StartAttack:
                    - Robot.StopAttack:

      
      - Monitor:  # State: Idle
          comment: "Idle State"
          condition: 
            Str.Equals: { $State, "Idle" }
          action:
           Race:
            - Tree: Transition_ToAlerted
            - Tree: Transition_ToAggressive
            - Sequence:
              - Robot.StopAttack:
              - Robot.SetEmotion: "Idle"
              - Robot.EnableLookAt: false
              - Animator.SetTrigger: { "Interrupt Action" }
              - Tree: Patrol
              
      - Idle:
